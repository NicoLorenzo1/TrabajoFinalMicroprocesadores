; Replace with your application code
.DSEG
numeros: .byte 512
end : .byte 1
.CSEG
.ORG 0x0000
	jmp	start            ;dirección de comienzo (vector de reset) 

	//Configuracion de los botones
.ORG 0x0008
	jmp botonesTimer

.ORG 0x001C
	jmp _tmr0_int           ;salto atención a rutina de comparación A del timer 0

 
start:
;-----------------------------Inicializo en uart---------------------------------;
	.equ F_CPU = 16000000
	.equ	baud	= 9600			; baudrate
	.equ	bps	= (F_CPU/16/baud) - 1	; baud prescale


	ldi	r16,LOW(bps)			; load baud prescale
	ldi	r17,HIGH(bps)			; into r17:r16

	sts	UBRR0L,r16			; load baud prescale
	sts	UBRR0H,r17			; to UBRR0

	ldi	r16,(1<<RXEN0)|(1<<TXEN0)	; enable transmitter
	sts	UCSR0B,r16			; and receiver

	ldi r16, (0<<USBS0)|(3<<UCSZ00)
	sts UCSR0C, r16
;-------------------------------------------------------------------------------;

	ldi r16,0b00111101       
    out DDRB,r16     ;4 LEDs del shield son salidas
    out PORTB, r16            ;apago los LEDs
    ldi r16,0b00000000       
    out DDRC,r16            ;3 botones del shield son entradas
    ldi r16,0b10010000
    out DDRD,   r16         ;configuro PD.4 y PD.7 como salidas
    cbi PORTD, 7            ;PD.7 a 0, es el reloj serial, inicializo a 0
    cbi PORTD, 4  ;PD.4 a 0, es el reloj del latch, inicializo a 0


    ldi r19,0b00000010       
	out TCCR0A,r19                    ;configuro para que cuente hasta OCR0A y vuelve a cero (reset on compare), ahí dispara la interrupción
    ldi r19,0b00000101       
    out TCCR0B,r19                    ;prescaler = 1024
    ldi r19,55          
    out OCR0A, r19                    ;comparo con 125
    ldi r19,0b00000010       
    sts TIMSK0,r19                    ;habilito la interrupción (falta habilitar global)
;-------------------------------------------------------------------------------------

;Configuro tmr1 para parte 2, interrupcion por boton

	ldi r20, 0x00
	out DDRC, r20
	
	ldi r16, 0b00000010 ; aca configuro para los 3 botones
	sts PCICR, r16

	ldi r16, 0b00001110
	sts PCMSK1, r16

;Inicializo algunos registros que voy a usar como variables.

    ldi r25,3
	ldi r18, 13																			
	ldi r19, 17																			
	ldi r21, 5																			
	ldi r31, 128  ;registro para hacer el gran loop y obtener 512 numeros aleatoreos		
;-------------------------------------------------------------------------------------

apagar:                ; apaga todo el display de 7 segmentos

	ldi r16,0b11111111
    ldi r17,0b11110000
    call showDisplay           
    sei

main:

	call loop_suma
	nop
	loopmain:
	nop
	nop
	nop
	rjmp loopmain

interrup_boton:
botonesTimer:

	in r17, SREG
	in r19, pinC
	andi r19, 0b00000010
	breq boton1
 
 //Se configura el boton para al pulsarlo llame a getc
boton1:

call getc
out SREG, r17
reti

getc:	
	ldi r28, low(numeros)//cargar en r28, low del buffer
	ldi r29, high(numeros)//cargar en r19 el high


loopgetc:
	//Paso de ram a r16, Y+	
	lds	r19,UCSR0A			; load UCSR0A into r17
	sbrs r19,RXC0			; wait for empty transmit buffer
	rjmp loopgetc				; repeat loop

	lds	r31, UDR0 ; transmit character
	
	st Y+, r31
	cpi r28, low(end)//comparan r28, low de end
	brne loopgetc
	cpi r29, high(end)//comparan r29, high end
	brne loopgetc
	;call loop_suma 
	  
    out SREG, r17
	reti

                                                            
loop_suma:
	ldi r28, low(numeros)//cargar en r28, low del buffer
	ldi r29, high(numeros)//cargar en r19 el high
	ldi r23, 0
loop:
	LD r21, Y+
	add r22, r21
	adc r20, r23
	cpi r28, low(end)//comparan r28, low de end
	brne loop
	cpi r29, high(end)//comparan r29, high end
	brne loop   
	reti

;-------------------------------------------------------------------------------------

; La rutina sacanum, envía lo que hay en r16 y r17 al display de 7 segmentos

; r16 - contiene los LEDs a prender/apagar 0 - prende, 1 - apaga

; r17 - contiene el dígito: r17 = 1000xxxx 0100xxxx 0010xxxx 0001xxxx del dígito menos al más significativo

 ;call tradu_hexa

seters:
set0:
	cpi r16, 0
	brne set1
	ldi r16,0b00000011
	call showDisplay	
	rjmp _tmr0_out              
set1:
	cpi r16, 1	
	brne set2	
	ldi r16,0b10011111	
	call showDisplay	
	rjmp _tmr0_out
set2:
	cpi r16, 2
	brne set3
	ldi r16,0b00100101
	call showDisplay
	rjmp _tmr0_out
set3:
	cpi r16, 3
	brne set4
	ldi r16,0b00001101
	call showDisplay
	rjmp _tmr0_out
set4:
	cpi r16, 4	
	brne set5
	ldi r16,0b10011001
	call showDisplay
	rjmp _tmr0_out
set5:
    cpi r16, 5
    brne set6
    ldi r16,0b01001001
    call showDisplay
	rjmp _tmr0_out
set6:
    cpi r16, 6
    brne set7
    ldi r16,0b01000001
    call showDisplay
	rjmp _tmr0_out
set7:
    cpi r16, 7
    brne set8
    ldi r16,0b00011111
    call showDisplay
	rjmp _tmr0_out
set8:
    cpi r16, 8
    brne set9
    ldi r16,0b00000001
    call showDisplay
	rjmp _tmr0_out
set9:
	cpi r16, 9
	brne setA
    ldi r16,0b00011001
    call showDisplay
	rjmp _tmr0_out

setA:
    cpi r16, 11
    brne setB
    ldi r16,0b00010001
    call showDisplay
	rjmp _tmr0_out
setB:
    cpi r16, 12
    brne setC
    ldi r16,0b00000000
    call showDisplay
	rjmp _tmr0_out
setC:
    cpi r16, 13
    brne setD
    ldi r16,0b01100011
    call showDisplay
	rjmp _tmr0_out
setD:
    cpi r16, 14
    brne setE
    ldi r16,0b00000011
    call showDisplay
	rjmp _tmr0_out
setE:
    cpi r16, 15
    brne set9
    ldi r16,0b01100001
    call showDisplay
	rjmp _tmr0_out
setF:
    cpi r16, 16
    ldi r16,0b01110001
    call showDisplay
	rjmp _tmr0_out

 
 

digito1:
    ldi r17,0b10000000
	mov r27, r22
	andi r27,0b11110000 
	swap r27
	mov r16, r27
    call seters
    dec r25
    rjmp _tmr0_out
digito2:
    ldi r17,0b01000000
	andi r22, 0b00001111
	mov r16, r22
    call seters
    dec r25
    rjmp _tmr0_out
digito3:
    ldi r17,0b00100000
	mov r24, r20
	andi r24,0b11110000
	swap r24
	mov r16, r24
    call seters
    dec r25
    rjmp _tmr0_out
digito4:
    ldi r17,0b00010000
    ldi r25, 3   
	andi r20, 0b00001111
	mov r16, r20
    call seters
    rjmp _tmr0_out

 
showDisplay:

    call dato_serie
    mov r16, r17
    call dato_serie
    sbi PORTD, 4   ;PD.4 a 1, es LCH el reloj del latch
    cbi PORTD, 4   ;PD.4 a 0,
    ret

 ;Voy a sacar un byte por el 7seg

dato_serie:

    ldi r18, 0x08      ;lo utilizo para contar 8 (8 bits)

loop_dato1:

    cbi PORTD, 7       ;SCLK = 0 reloj en 0
    lsr r16            ;roto a la derecha r16 y el bit 0 se pone en el C
    brcs loop_dato2                        
    cbi PORTB, 0       ;SD = 0 escribo un 0
    rjmp loop_dato3

loop_dato2:

    sbi PORTB, 0      ;SD = 1 escribo un 1

loop_dato3:

    sbi PORTD, 7     ;SCLK = 1 reloj en 1
    dec r18
    brne loop_dato1  ;cuando r17 llega a 0 corta y vuelve
    ret

;RUTINAS

;-------------------------------------------------------------------------------------

 

_tmr0_int:                                        

    in r20, SREG
    cpi  r25, 3
    breq digito1
    cpi r25, 2
    breq digito2
    cpi r25, 1
    breq digito3
    cpi r25, 0
    breq digito4  
    brne _tmr0_out 
	  
_tmr0_out:

    out SREG, r20       ; out guarda lo q hay en r20 en SREG
    reti                ;retorno de la rutina de interrupción del Timer0